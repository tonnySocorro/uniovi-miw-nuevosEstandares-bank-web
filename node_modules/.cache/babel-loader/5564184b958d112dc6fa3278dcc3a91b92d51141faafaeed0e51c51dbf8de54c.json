{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n  const result = {};\n  for (let key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n    let value = hexlify(transaction[key]);\n    // Quantity-types require no leading zero, unless 0\n    if ({\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(value);\n    }\n    result[key] = value;\n  }\n  return result;\n}\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n  if (result.status != 1 || result.message != \"OK\") {\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n    throw error;\n  }\n  return result.result;\n}\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    const error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n  if (result.error) {\n    // @TODO: not any\n    const error = new Error(result.error.message || \"unknown error\");\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n    throw error;\n  }\n  return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n  return parseInt(blockTag.substring(2), 16);\n}\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error;\n    if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n      return e.data;\n    }\n  }\n  // Get the message from any nested error structure\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n  message = (message || \"\").toLowerCase();\n  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction with the same hash was already imported.\"\n  if (message.match(/same hash was already imported|transaction nonce is too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (message.match(/execution failed due to an exception/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n  constructor(network, apiKey) {\n    logger.checkNew(new.target, EtherscanProvider);\n    super(network);\n    let name = \"invalid\";\n    if (this.network) {\n      name = this.network.name;\n    }\n    let baseUrl = null;\n    switch (name) {\n      case \"homestead\":\n        baseUrl = \"https://api.etherscan.io\";\n        break;\n      case \"ropsten\":\n        baseUrl = \"https://api-ropsten.etherscan.io\";\n        break;\n      case \"rinkeby\":\n        baseUrl = \"https://api-rinkeby.etherscan.io\";\n        break;\n      case \"kovan\":\n        baseUrl = \"https://api-kovan.etherscan.io\";\n        break;\n      case \"goerli\":\n        baseUrl = \"https://api-goerli.etherscan.io\";\n        break;\n      default:\n        throw new Error(\"unsupported network\");\n    }\n    defineReadOnly(this, \"baseUrl\", baseUrl);\n    defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n  }\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.network;\n    });\n  }\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = this.baseUrl + \"/api\";\n      let apiKey = \"\";\n      if (this.apiKey) {\n        apiKey += \"&apikey=\" + this.apiKey;\n      }\n      const get = (url, payload, procFunc) => __awaiter(this, void 0, void 0, function* () {\n        this.emit(\"debug\", {\n          action: \"request\",\n          request: url,\n          provider: this\n        });\n        const connection = {\n          url: url,\n          throttleSlotInterval: 1000,\n          throttleCallback: (attempt, url) => {\n            if (this.isCommunityResource()) {\n              showThrottleMessage();\n            }\n            return Promise.resolve(true);\n          }\n        };\n        let payloadStr = null;\n        if (payload) {\n          connection.headers = {\n            \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n          };\n          payloadStr = Object.keys(payload).map(key => {\n            return `${key}=${payload[key]}`;\n          }).join(\"&\");\n        }\n        const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n        this.emit(\"debug\", {\n          action: \"response\",\n          request: url,\n          response: deepCopy(result),\n          provider: this\n        });\n        return result;\n      });\n      switch (method) {\n        case \"getBlockNumber\":\n          url += \"?module=proxy&action=eth_blockNumber\" + apiKey;\n          return get(url, null);\n        case \"getGasPrice\":\n          url += \"?module=proxy&action=eth_gasPrice\" + apiKey;\n          return get(url, null);\n        case \"getBalance\":\n          // Returns base-10 result\n          url += \"?module=account&action=balance&address=\" + params.address;\n          url += \"&tag=\" + params.blockTag + apiKey;\n          return get(url, null, getResult);\n        case \"getTransactionCount\":\n          url += \"?module=proxy&action=eth_getTransactionCount&address=\" + params.address;\n          url += \"&tag=\" + params.blockTag + apiKey;\n          return get(url, null);\n        case \"getCode\":\n          url += \"?module=proxy&action=eth_getCode&address=\" + params.address;\n          url += \"&tag=\" + params.blockTag + apiKey;\n          return get(url, null);\n        case \"getStorageAt\":\n          url += \"?module=proxy&action=eth_getStorageAt&address=\" + params.address;\n          url += \"&position=\" + params.position;\n          url += \"&tag=\" + params.blockTag + apiKey;\n          return get(url, null);\n        case \"sendTransaction\":\n          return get(url, {\n            module: \"proxy\",\n            action: \"eth_sendRawTransaction\",\n            hex: params.signedTransaction,\n            apikey: this.apiKey\n          }).catch(error => {\n            return checkError(\"sendTransaction\", error, params.signedTransaction);\n          });\n        case \"getBlock\":\n          if (params.blockTag) {\n            url += \"?module=proxy&action=eth_getBlockByNumber&tag=\" + params.blockTag;\n            if (params.includeTransactions) {\n              url += \"&boolean=true\";\n            } else {\n              url += \"&boolean=false\";\n            }\n            url += apiKey;\n            return get(url, null);\n          }\n          throw new Error(\"getBlock by blockHash not implemented\");\n        case \"getTransaction\":\n          url += \"?module=proxy&action=eth_getTransactionByHash&txhash=\" + params.transactionHash;\n          url += apiKey;\n          return get(url, null);\n        case \"getTransactionReceipt\":\n          url += \"?module=proxy&action=eth_getTransactionReceipt&txhash=\" + params.transactionHash;\n          url += apiKey;\n          return get(url, null);\n        case \"call\":\n          {\n            if (params.blockTag !== \"latest\") {\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            }\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_call\";\n            postData.apikey = this.apiKey;\n            try {\n              return yield get(url, postData);\n            } catch (error) {\n              return checkError(\"call\", error, params.transaction);\n            }\n          }\n        case \"estimateGas\":\n          {\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_estimateGas\";\n            postData.apikey = this.apiKey;\n            try {\n              return yield get(url, postData);\n            } catch (error) {\n              return checkError(\"estimateGas\", error, params.transaction);\n            }\n          }\n        case \"getLogs\":\n          {\n            url += \"?module=logs&action=getLogs\";\n            if (params.filter.fromBlock) {\n              url += \"&fromBlock=\" + checkLogTag(params.filter.fromBlock);\n            }\n            if (params.filter.toBlock) {\n              url += \"&toBlock=\" + checkLogTag(params.filter.toBlock);\n            }\n            if (params.filter.address) {\n              url += \"&address=\" + params.filter.address;\n            }\n            // @TODO: We can handle slightly more complicated logs using the logs API\n            if (params.filter.topics && params.filter.topics.length > 0) {\n              if (params.filter.topics.length > 1) {\n                logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  topics: params.filter.topics\n                });\n              }\n              if (params.filter.topics.length === 1) {\n                const topic0 = params.filter.topics[0];\n                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                  logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topic0: topic0\n                  });\n                }\n                url += \"&topic0=\" + topic0;\n              }\n            }\n            url += apiKey;\n            const logs = yield get(url, null, getResult);\n            // Cache txHash => blockHash\n            let blocks = {};\n            // Add any missing blockHash to the logs\n            for (let i = 0; i < logs.length; i++) {\n              const log = logs[i];\n              if (log.blockHash != null) {\n                continue;\n              }\n              if (blocks[log.blockNumber] == null) {\n                const block = yield this.getBlock(log.blockNumber);\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n              }\n              log.blockHash = blocks[log.blockNumber];\n            }\n            return logs;\n          }\n        case \"getEtherPrice\":\n          if (this.network.name !== \"homestead\") {\n            return 0.0;\n          }\n          url += \"?module=stats&action=ethprice\";\n          url += apiKey;\n          return parseFloat((yield get(url, null, getResult)).ethusd);\n        default:\n          break;\n      }\n      return _super.perform.call(this, method, params);\n    });\n  }\n  // @TODO: Allow startBlock and endBlock to be Promises\n  getHistory(addressOrName, startBlock, endBlock) {\n    let url = this.baseUrl;\n    let apiKey = \"\";\n    if (this.apiKey) {\n      apiKey += \"&apikey=\" + this.apiKey;\n    }\n    if (startBlock == null) {\n      startBlock = 0;\n    }\n    if (endBlock == null) {\n      endBlock = 99999999;\n    }\n    return this.resolveName(addressOrName).then(address => {\n      url += \"/api?module=account&action=txlist&address=\" + address;\n      url += \"&startblock=\" + startBlock;\n      url += \"&endblock=\" + endBlock;\n      url += \"&sort=asc\" + apiKey;\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: url,\n        provider: this\n      });\n      const connection = {\n        url: url,\n        throttleSlotInterval: 1000,\n        throttleCallback: (attempt, url) => {\n          if (this.apiKey === defaultApiKey) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n      return fetchJson(connection, null, getResult).then(result => {\n        this.emit(\"debug\", {\n          action: \"response\",\n          request: url,\n          response: deepCopy(result),\n          provider: this\n        });\n        let output = [];\n        result.forEach(tx => {\n          [\"contractAddress\", \"to\"].forEach(function (key) {\n            if (tx[key] == \"\") {\n              delete tx[key];\n            }\n          });\n          if (tx.creates == null && tx.contractAddress != null) {\n            tx.creates = tx.contractAddress;\n          }\n          let item = this.formatter.transactionResponse(tx);\n          if (tx.timeStamp) {\n            item.timestamp = parseInt(tx.timeStamp);\n          }\n          output.push(item);\n        });\n        return output;\n      });\n    });\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"names":["hexlify","hexValue","isHexString","deepCopy","defineReadOnly","fetchJson","showThrottleMessage","Logger","version","logger","BaseProvider","getTransactionPostData","transaction","result","key","value","gasLimit","gasPrice","nonce","getResult","status","message","error","Error","JSON","stringify","toLowerCase","indexOf","throttleRetry","getJsonResult","jsonrpc","code","data","checkLogTag","blockTag","parseInt","substring","defaultApiKey","checkError","method","errors","SERVER_ERROR","e","match","body","responseText","throwError","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","EtherscanProvider","constructor","network","apiKey","checkNew","new","target","name","baseUrl","detectNetwork","perform","params","url","get","payload","procFunc","__awaiter","emit","action","request","provider","connection","throttleSlotInterval","throttleCallback","attempt","isCommunityResource","Promise","resolve","payloadStr","headers","Object","keys","map","join","response","address","position","module","hex","signedTransaction","apikey","catch","includeTransactions","transactionHash","postData","filter","fromBlock","toBlock","topics","length","UNSUPPORTED_OPERATION","topic0","logs","blocks","i","log","blockHash","blockNumber","block","getBlock","hash","parseFloat","ethusd","_super","call","getHistory","addressOrName","startBlock","endBlock","resolveName","then","output","forEach","tx","creates","contractAddress","item","formatter","transactionResponse","timeStamp","timestamp","push"],"sources":["/Users/tonny/copia del poyecto/my-app/node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = hexlify((<any>transaction)[key]);\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ gasLimit: true, gasPrice: true, nonce: true, value: true })[key]) {\n            value = hexValue(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        let name = \"invalid\";\n        if (this.network) { name = this.network.name; }\n\n        let baseUrl = null;\n        switch(name) {\n            case \"homestead\":\n                baseUrl = \"https://api.etherscan.io\";\n                break;\n            case \"ropsten\":\n                baseUrl = \"https://api-ropsten.etherscan.io\";\n                break;\n            case \"rinkeby\":\n                baseUrl = \"https://api-rinkeby.etherscan.io\";\n                break;\n            case \"kovan\":\n                baseUrl = \"https://api-kovan.etherscan.io\";\n                break;\n            case \"goerli\":\n                baseUrl = \"https://api-goerli.etherscan.io\";\n                break;\n            default:\n                throw new Error(\"unsupported network\");\n        }\n\n        defineReadOnly(this, \"baseUrl\", baseUrl);\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        let url = this.baseUrl + \"/api\";\n\n        let apiKey = \"\";\n        if (this.apiKey) { apiKey += \"&apikey=\" + this.apiKey; }\n\n        const get = async (url: string, payload: Record<string, string>, procFunc?: (value: any) => any): Promise<any> => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n\n\n            const connection: ConnectionInfo = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt: number, url: string) => {\n                    if (this.isCommunityResource()) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n\n            let payloadStr: string = null;\n            if (payload) {\n                connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n                payloadStr = Object.keys(payload).map((key) => {\n                    return `${ key }=${ payload[key] }`\n                }).join(\"&\");\n            }\n\n            const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: deepCopy(result),\n                provider: this\n            });\n\n            return result;\n        };\n\n        switch (method) {\n            case \"getBlockNumber\":\n                url += \"?module=proxy&action=eth_blockNumber\" + apiKey;\n                return get(url, null);\n\n            case \"getGasPrice\":\n                url += \"?module=proxy&action=eth_gasPrice\" + apiKey;\n                return get(url, null);\n\n            case \"getBalance\":\n                // Returns base-10 result\n                url += \"?module=account&action=balance&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return get(url, null, getResult);\n\n            case \"getTransactionCount\":\n                url += \"?module=proxy&action=eth_getTransactionCount&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return get(url, null);\n\n\n            case \"getCode\":\n                url += \"?module=proxy&action=eth_getCode&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return get(url, null);\n\n            case \"getStorageAt\":\n                url += \"?module=proxy&action=eth_getStorageAt&address=\" + params.address;\n                url += \"&position=\" + params.position;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return get(url, null);\n\n\n            case \"sendTransaction\":\n                return get(url, {\n                    module: \"proxy\",\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction,\n                    apikey: this.apiKey\n                }).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    url += \"?module=proxy&action=eth_getBlockByNumber&tag=\" + params.blockTag;\n                    if (params.includeTransactions) {\n                        url += \"&boolean=true\";\n                    } else {\n                        url += \"&boolean=false\";\n                    }\n                    url += apiKey;\n                    return get(url, null);\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                url += \"?module=proxy&action=eth_getTransactionByHash&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return get(url, null);\n\n            case \"getTransactionReceipt\":\n                url += \"?module=proxy&action=eth_getTransactionReceipt&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return get(url, null);\n\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n                postData.apikey = this.apiKey;\n\n                try {\n                    return await get(url, postData);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n                postData.apikey = this.apiKey;\n\n                try {\n                    return await get(url, postData);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                url += \"?module=logs&action=getLogs\";\n\n                if (params.filter.fromBlock) {\n                    url += \"&fromBlock=\" + checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    url += \"&toBlock=\" + checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    url += \"&address=\" + params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        url += \"&topic0=\" + topic0;\n                    }\n                }\n\n                url += apiKey;\n\n                const logs: Array<any> = await get(url, null, getResult);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                url += \"?module=stats&action=ethprice\";\n                url += apiKey;\n                return parseFloat((await get(url, null, getResult)).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // @TODO: Allow startBlock and endBlock to be Promises\n    getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n\n        let url = this.baseUrl;\n\n        let apiKey = \"\";\n        if (this.apiKey) { apiKey += \"&apikey=\" + this.apiKey; }\n\n        if (startBlock == null) { startBlock = 0; }\n        if (endBlock == null) { endBlock = 99999999; }\n\n        return this.resolveName(addressOrName).then((address) => {\n            url += \"/api?module=account&action=txlist&address=\" + address;\n            url += \"&startblock=\" + startBlock;\n            url += \"&endblock=\" + endBlock;\n            url += \"&sort=asc\" + apiKey;\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt: number, url: string) => {\n                    if (this.apiKey === defaultApiKey) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            }\n\n            return fetchJson(connection, null, getResult).then((result: Array<any>) => {\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    request: url,\n                    response: deepCopy(result),\n                    provider: this\n                });\n\n                let output: Array<TransactionResponse> = [];\n                result.forEach((tx) => {\n                    [\"contractAddress\", \"to\"].forEach(function(key) {\n                        if (tx[key] == \"\") { delete tx[key]; }\n                    });\n                    if (tx.creates == null && tx.contractAddress != null) {\n                        tx.creates = tx.contractAddress;\n                    }\n                    let item = this.formatter.transactionResponse(tx);\n                    if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n                    output.push(item);\n                });\n                return output;\n            });\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGZ,SAASA,OAAO,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,sBAAsB;AAErE,SAASC,QAAQ,EAAEC,cAAc,QAAQ,2BAA2B;AACpE,SAAyBC,SAAS,QAAQ,oBAAoB;AAE9D,SAASC,mBAAmB,QAAQ,aAAa;AAEjD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,SAASE,YAAY,QAAQ,iBAAiB;AAG9C;AACA,SAASC,sBAAsBA,CAACC,WAA+B;EAC3D,MAAMC,MAAM,GAA2B,EAAG;EAC1C,KAAK,IAAIC,GAAG,IAAIF,WAAW,EAAE;IACzB,IAAUA,WAAY,CAACE,GAAG,CAAC,IAAI,IAAI,EAAE;MAAE;;IACvC,IAAIC,KAAK,GAAGf,OAAO,CAAOY,WAAY,CAACE,GAAG,CAAC,CAAC;IAC5C;IACA,IAAU;MAAEE,QAAQ,EAAE,IAAI;MAAEC,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE,IAAI;MAAEH,KAAK,EAAE;IAAI,CAAG,CAACD,GAAG,CAAC,EAAE;MAC1EC,KAAK,GAAGd,QAAQ,CAACc,KAAK,CAAC;;IAE3BF,MAAM,CAACC,GAAG,CAAC,GAAGC,KAAK;;EAEvB,OAAOF,MAAM;AACjB;AAEA,SAASM,SAASA,CAACN,MAA2D;EAC1E;EACA,IAAIA,MAAM,CAACO,MAAM,IAAI,CAAC,KAAKP,MAAM,CAACQ,OAAO,KAAK,kBAAkB,IAAIR,MAAM,CAACQ,OAAO,KAAK,uBAAuB,CAAC,EAAE;IAC7G,OAAOR,MAAM,CAACA,MAAM;;EAGxB,IAAIA,MAAM,CAACO,MAAM,IAAI,CAAC,IAAIP,MAAM,CAACQ,OAAO,IAAI,IAAI,EAAE;IAC9C,MAAMC,KAAK,GAAQ,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IAChDD,KAAK,CAACT,MAAM,GAAGW,IAAI,CAACC,SAAS,CAACZ,MAAM,CAAC;IACrC,IAAI,CAACA,MAAM,CAACA,MAAM,IAAI,EAAE,EAAEa,WAAW,EAAE,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;MAChEL,KAAK,CAACM,aAAa,GAAG,IAAI;;IAE9B,MAAMN,KAAK;;EAGf,OAAOT,MAAM,CAACA,MAAM;AACxB;AAEA,SAASgB,aAAaA,CAAChB,MAAiG;EACpH;EACA,IAAIA,MAAM,IAAUA,MAAO,CAACO,MAAM,IAAI,CAAC,IAAUP,MAAO,CAACQ,OAAO,IAAI,OAAO,IAAI,CAACR,MAAM,CAACA,MAAM,IAAI,EAAE,EAAEa,WAAW,EAAE,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;IAC3I,MAAML,KAAK,GAAQ,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IAClDD,KAAK,CAACT,MAAM,GAAGW,IAAI,CAACC,SAAS,CAACZ,MAAM,CAAC;IACrCS,KAAK,CAACM,aAAa,GAAG,IAAI;IAC1B,MAAMN,KAAK;;EAGf,IAAIT,MAAM,CAACiB,OAAO,IAAI,KAAK,EAAE;IACzB;IACA,MAAMR,KAAK,GAAQ,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IAChDD,KAAK,CAACT,MAAM,GAAGW,IAAI,CAACC,SAAS,CAACZ,MAAM,CAAC;IACrC,MAAMS,KAAK;;EAGf,IAAIT,MAAM,CAACS,KAAK,EAAE;IACd;IACA,MAAMA,KAAK,GAAQ,IAAIC,KAAK,CAACV,MAAM,CAACS,KAAK,CAACD,OAAO,IAAI,eAAe,CAAC;IACrE,IAAIR,MAAM,CAACS,KAAK,CAACS,IAAI,EAAE;MAAET,KAAK,CAACS,IAAI,GAAGlB,MAAM,CAACS,KAAK,CAACS,IAAI;;IACvD,IAAIlB,MAAM,CAACS,KAAK,CAACU,IAAI,EAAE;MAAEV,KAAK,CAACU,IAAI,GAAGnB,MAAM,CAACS,KAAK,CAACU,IAAI;;IACvD,MAAMV,KAAK;;EAGf,OAAOT,MAAM,CAACA,MAAM;AACxB;AAEA;AACA,SAASoB,WAAWA,CAACC,QAAgB;EACjC,IAAIA,QAAQ,KAAK,SAAS,EAAE;IAAE,MAAM,IAAIX,KAAK,CAAC,uBAAuB,CAAC;;EACtE,IAAIW,QAAQ,KAAK,QAAQ,EAAE;IAAE,OAAOA,QAAQ;;EAE5C,OAAOC,QAAQ,CAACD,QAAQ,CAACE,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAC9C;AAGA,MAAMC,aAAa,GAAG,oCAAoC;AAE1D,SAASC,UAAUA,CAACC,MAAc,EAAEjB,KAAU,EAAEV,WAAgB;EAC5D;EACA;EACA,IAAI2B,MAAM,KAAK,MAAM,IAAIjB,KAAK,CAACS,IAAI,KAAKxB,MAAM,CAACiC,MAAM,CAACC,YAAY,EAAE;IAChE,MAAMC,CAAC,GAAGpB,KAAK,CAACA,KAAK;IACrB,IAAIoB,CAAC,IAAIA,CAAC,CAACrB,OAAO,CAACsB,KAAK,CAAC,UAAU,CAAC,IAAIzC,WAAW,CAACwC,CAAC,CAACV,IAAI,CAAC,EAAE;MACzD,OAAOU,CAAC,CAACV,IAAI;;;EAIrB;EACA,IAAIX,OAAO,GAAGC,KAAK,CAACD,OAAO;EAC3B,IAAIC,KAAK,CAACS,IAAI,KAAKxB,MAAM,CAACiC,MAAM,CAACC,YAAY,EAAE;IAC3C,IAAInB,KAAK,CAACA,KAAK,IAAI,OAAOA,KAAK,CAACA,KAAK,CAACD,OAAQ,KAAK,QAAQ,EAAE;MACzDA,OAAO,GAAGC,KAAK,CAACA,KAAK,CAACD,OAAO;KAChC,MAAM,IAAI,OAAOC,KAAK,CAACsB,IAAK,KAAK,QAAQ,EAAE;MACxCvB,OAAO,GAAGC,KAAK,CAACsB,IAAI;KACvB,MAAM,IAAI,OAAOtB,KAAK,CAACuB,YAAa,KAAK,QAAQ,EAAE;MAChDxB,OAAO,GAAGC,KAAK,CAACuB,YAAY;;;EAGpCxB,OAAO,GAAG,CAACA,OAAO,IAAI,EAAE,EAAEK,WAAW,EAAE;EAEvC;EACA,IAAIL,OAAO,CAACsB,KAAK,CAAC,oBAAoB,CAAC,EAAE;IACrClC,MAAM,CAACqC,UAAU,CAAC,mDAAmD,EAAEvC,MAAM,CAACiC,MAAM,CAACO,kBAAkB,EAAE;MACtGzB,KAAK;MAAEiB,MAAM;MAAE3B;KACjB,CAAC;;EAGN;EACA,IAAIS,OAAO,CAACsB,KAAK,CAAC,6DAA6D,CAAC,EAAE;IAC9ElC,MAAM,CAACqC,UAAU,CAAC,6BAA6B,EAAEvC,MAAM,CAACiC,MAAM,CAACQ,aAAa,EAAE;MAC3E1B,KAAK;MAAEiB,MAAM;MAAE3B;KACjB,CAAC;;EAGN;EACA,IAAIS,OAAO,CAACsB,KAAK,CAAC,qCAAqC,CAAC,EAAE;IACrDlC,MAAM,CAACqC,UAAU,CAAC,yBAAyB,EAAEvC,MAAM,CAACiC,MAAM,CAACS,uBAAuB,EAAE;MACjF3B,KAAK;MAAEiB,MAAM;MAAE3B;KACjB,CAAC;;EAGP,IAAIS,OAAO,CAACsB,KAAK,CAAC,sCAAsC,CAAC,EAAE;IACvDlC,MAAM,CAACqC,UAAU,CAAC,2EAA2E,EAAEvC,MAAM,CAACiC,MAAM,CAACU,uBAAuB,EAAE;MAClI5B,KAAK;MAAEiB,MAAM;MAAE3B;KAClB,CAAC;;EAGN,MAAMU,KAAK;AACf;AAEA,OAAM,MAAO6B,iBAAkB,SAAQzC,YAAY;EAI/C0C,YAAYC,OAAoB,EAAEC,MAAe;IAC7C7C,MAAM,CAAC8C,QAAQ,CAACC,GAAG,CAACC,MAAM,EAAEN,iBAAiB,CAAC;IAE9C,KAAK,CAACE,OAAO,CAAC;IAEd,IAAIK,IAAI,GAAG,SAAS;IACpB,IAAI,IAAI,CAACL,OAAO,EAAE;MAAEK,IAAI,GAAG,IAAI,CAACL,OAAO,CAACK,IAAI;;IAE5C,IAAIC,OAAO,GAAG,IAAI;IAClB,QAAOD,IAAI;MACP,KAAK,WAAW;QACZC,OAAO,GAAG,0BAA0B;QACpC;MACJ,KAAK,SAAS;QACVA,OAAO,GAAG,kCAAkC;QAC5C;MACJ,KAAK,SAAS;QACVA,OAAO,GAAG,kCAAkC;QAC5C;MACJ,KAAK,OAAO;QACRA,OAAO,GAAG,gCAAgC;QAC1C;MACJ,KAAK,QAAQ;QACTA,OAAO,GAAG,iCAAiC;QAC3C;MACJ;QACI,MAAM,IAAIpC,KAAK,CAAC,qBAAqB,CAAC;;IAG9CnB,cAAc,CAAC,IAAI,EAAE,SAAS,EAAEuD,OAAO,CAAC;IACxCvD,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEkD,MAAM,IAAIjB,aAAa,CAAC;EAC3D;EAEMuB,aAAaA,CAAA;;MACf,OAAO,IAAI,CAACP,OAAO;IACvB,CAAC;;EAEKQ,OAAOA,CAACtB,MAAc,EAAEuB,MAAW;;;;;;;MACrC,IAAIC,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAG,MAAM;MAE/B,IAAIL,MAAM,GAAG,EAAE;MACf,IAAI,IAAI,CAACA,MAAM,EAAE;QAAEA,MAAM,IAAI,UAAU,GAAG,IAAI,CAACA,MAAM;;MAErD,MAAMU,GAAG,GAAGA,CAAOD,GAAW,EAAEE,OAA+B,EAAEC,QAA8B,KAAkBC,SAAA;QAC7G,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE;UACfC,MAAM,EAAE,SAAS;UACjBC,OAAO,EAAEP,GAAG;UACZQ,QAAQ,EAAE;SACb,CAAC;QAGF,MAAMC,UAAU,GAAmB;UAC/BT,GAAG,EAAEA,GAAG;UACRU,oBAAoB,EAAE,IAAI;UAC1BC,gBAAgB,EAAEA,CAACC,OAAe,EAAEZ,GAAW,KAAI;YAC/C,IAAI,IAAI,CAACa,mBAAmB,EAAE,EAAE;cAC5BtE,mBAAmB,EAAE;;YAEzB,OAAOuE,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;UAChC;SACH;QAED,IAAIC,UAAU,GAAW,IAAI;QAC7B,IAAId,OAAO,EAAE;UACTO,UAAU,CAACQ,OAAO,GAAG;YAAE,cAAc,EAAE;UAAkD,CAAE;UAC3FD,UAAU,GAAGE,MAAM,CAACC,IAAI,CAACjB,OAAO,CAAC,CAACkB,GAAG,CAAErE,GAAG,IAAI;YAC1C,OAAO,GAAIA,GAAI,IAAKmD,OAAO,CAACnD,GAAG,CAAE,EAAE;UACvC,CAAC,CAAC,CAACsE,IAAI,CAAC,GAAG,CAAC;;QAGhB,MAAMvE,MAAM,GAAG,MAAMR,SAAS,CAACmE,UAAU,EAAEO,UAAU,EAAEb,QAAQ,IAAIrC,aAAa,CAAC;QAEjF,IAAI,CAACuC,IAAI,CAAC,OAAO,EAAE;UACfC,MAAM,EAAE,UAAU;UAClBC,OAAO,EAAEP,GAAG;UACZsB,QAAQ,EAAElF,QAAQ,CAACU,MAAM,CAAC;UAC1B0D,QAAQ,EAAE;SACb,CAAC;QAEF,OAAO1D,MAAM;MACjB,CAAC;MAED,QAAQ0B,MAAM;QACV,KAAK,gBAAgB;UACjBwB,GAAG,IAAI,sCAAsC,GAAGT,MAAM;UACtD,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;QAEzB,KAAK,aAAa;UACdA,GAAG,IAAI,mCAAmC,GAAGT,MAAM;UACnD,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;QAEzB,KAAK,YAAY;UACb;UACAA,GAAG,IAAI,yCAAyC,GAAGD,MAAM,CAACwB,OAAO;UACjEvB,GAAG,IAAI,OAAO,GAAGD,MAAM,CAAC5B,QAAQ,GAAGoB,MAAM;UACzC,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,EAAE5C,SAAS,CAAC;QAEpC,KAAK,qBAAqB;UACtB4C,GAAG,IAAI,uDAAuD,GAAGD,MAAM,CAACwB,OAAO;UAC/EvB,GAAG,IAAI,OAAO,GAAGD,MAAM,CAAC5B,QAAQ,GAAGoB,MAAM;UACzC,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;QAGzB,KAAK,SAAS;UACVA,GAAG,IAAI,2CAA2C,GAAGD,MAAM,CAACwB,OAAO;UACnEvB,GAAG,IAAI,OAAO,GAAGD,MAAM,CAAC5B,QAAQ,GAAGoB,MAAM;UACzC,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;QAEzB,KAAK,cAAc;UACfA,GAAG,IAAI,gDAAgD,GAAGD,MAAM,CAACwB,OAAO;UACxEvB,GAAG,IAAI,YAAY,GAAGD,MAAM,CAACyB,QAAQ;UACrCxB,GAAG,IAAI,OAAO,GAAGD,MAAM,CAAC5B,QAAQ,GAAGoB,MAAM;UACzC,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;QAGzB,KAAK,iBAAiB;UAClB,OAAOC,GAAG,CAACD,GAAG,EAAE;YACZyB,MAAM,EAAE,OAAO;YACfnB,MAAM,EAAE,wBAAwB;YAChCoB,GAAG,EAAE3B,MAAM,CAAC4B,iBAAiB;YAC7BC,MAAM,EAAE,IAAI,CAACrC;WAChB,CAAC,CAACsC,KAAK,CAAEtE,KAAK,IAAI;YACf,OAAOgB,UAAU,CAAC,iBAAiB,EAAEhB,KAAK,EAAEwC,MAAM,CAAC4B,iBAAiB,CAAC;UACzE,CAAC,CAAC;QAEN,KAAK,UAAU;UACX,IAAI5B,MAAM,CAAC5B,QAAQ,EAAE;YACjB6B,GAAG,IAAI,gDAAgD,GAAGD,MAAM,CAAC5B,QAAQ;YACzE,IAAI4B,MAAM,CAAC+B,mBAAmB,EAAE;cAC5B9B,GAAG,IAAI,eAAe;aACzB,MAAM;cACHA,GAAG,IAAI,gBAAgB;;YAE3BA,GAAG,IAAIT,MAAM;YACb,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;;UAEzB,MAAM,IAAIxC,KAAK,CAAC,uCAAuC,CAAC;QAE5D,KAAK,gBAAgB;UACjBwC,GAAG,IAAI,uDAAuD,GAAGD,MAAM,CAACgC,eAAe;UACvF/B,GAAG,IAAIT,MAAM;UACb,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;QAEzB,KAAK,uBAAuB;UACxBA,GAAG,IAAI,wDAAwD,GAAGD,MAAM,CAACgC,eAAe;UACxF/B,GAAG,IAAIT,MAAM;UACb,OAAOU,GAAG,CAACD,GAAG,EAAE,IAAI,CAAC;QAGzB,KAAK,MAAM;UAAE;YACT,IAAID,MAAM,CAAC5B,QAAQ,KAAK,QAAQ,EAAE;cAC9B,MAAM,IAAIX,KAAK,CAAC,sDAAsD,CAAC;;YAG3E,MAAMwE,QAAQ,GAAGpF,sBAAsB,CAACmD,MAAM,CAAClD,WAAW,CAAC;YAC3DmF,QAAQ,CAACP,MAAM,GAAG,OAAO;YACzBO,QAAQ,CAAC1B,MAAM,GAAG,UAAU;YAC5B0B,QAAQ,CAACJ,MAAM,GAAG,IAAI,CAACrC,MAAM;YAE7B,IAAI;cACA,OAAO,MAAMU,GAAG,CAACD,GAAG,EAAEgC,QAAQ,CAAC;aAClC,CAAC,OAAOzE,KAAK,EAAE;cACZ,OAAOgB,UAAU,CAAC,MAAM,EAAEhB,KAAK,EAAEwC,MAAM,CAAClD,WAAW,CAAC;;;QAI5D,KAAK,aAAa;UAAE;YAChB,MAAMmF,QAAQ,GAAGpF,sBAAsB,CAACmD,MAAM,CAAClD,WAAW,CAAC;YAC3DmF,QAAQ,CAACP,MAAM,GAAG,OAAO;YACzBO,QAAQ,CAAC1B,MAAM,GAAG,iBAAiB;YACnC0B,QAAQ,CAACJ,MAAM,GAAG,IAAI,CAACrC,MAAM;YAE7B,IAAI;cACA,OAAO,MAAMU,GAAG,CAACD,GAAG,EAAEgC,QAAQ,CAAC;aAClC,CAAC,OAAOzE,KAAK,EAAE;cACZ,OAAOgB,UAAU,CAAC,aAAa,EAAEhB,KAAK,EAAEwC,MAAM,CAAClD,WAAW,CAAC;;;QAInE,KAAK,SAAS;UAAE;YACZmD,GAAG,IAAI,6BAA6B;YAEpC,IAAID,MAAM,CAACkC,MAAM,CAACC,SAAS,EAAE;cACzBlC,GAAG,IAAI,aAAa,GAAG9B,WAAW,CAAC6B,MAAM,CAACkC,MAAM,CAACC,SAAS,CAAC;;YAG/D,IAAInC,MAAM,CAACkC,MAAM,CAACE,OAAO,EAAE;cACvBnC,GAAG,IAAI,WAAW,GAAG9B,WAAW,CAAC6B,MAAM,CAACkC,MAAM,CAACE,OAAO,CAAC;;YAG3D,IAAIpC,MAAM,CAACkC,MAAM,CAACV,OAAO,EAAE;cACvBvB,GAAG,IAAI,WAAW,GAAGD,MAAM,CAACkC,MAAM,CAACV,OAAO;;YAG9C;YACA,IAAIxB,MAAM,CAACkC,MAAM,CAACG,MAAM,IAAIrC,MAAM,CAACkC,MAAM,CAACG,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;cACzD,IAAItC,MAAM,CAACkC,MAAM,CAACG,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;gBACjC3F,MAAM,CAACqC,UAAU,CAAC,yBAAyB,EAAEvC,MAAM,CAACiC,MAAM,CAAC6D,qBAAqB,EAAE;kBAAEF,MAAM,EAAErC,MAAM,CAACkC,MAAM,CAACG;gBAAM,CAAE,CAAC;;cAGvH,IAAIrC,MAAM,CAACkC,MAAM,CAACG,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;gBACnC,MAAME,MAAM,GAAGxC,MAAM,CAACkC,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC;gBACtC,IAAI,OAAOG,MAAO,KAAK,QAAQ,IAAIA,MAAM,CAACF,MAAM,KAAK,EAAE,EAAE;kBACrD3F,MAAM,CAACqC,UAAU,CAAC,0BAA0B,EAAEvC,MAAM,CAACiC,MAAM,CAAC6D,qBAAqB,EAAE;oBAAEC,MAAM,EAAEA;kBAAM,CAAE,CAAC;;gBAE1GvC,GAAG,IAAI,UAAU,GAAGuC,MAAM;;;YAIlCvC,GAAG,IAAIT,MAAM;YAEb,MAAMiD,IAAI,GAAe,MAAMvC,GAAG,CAACD,GAAG,EAAE,IAAI,EAAE5C,SAAS,CAAC;YAExD;YACA,IAAIqF,MAAM,GAA8B,EAAE;YAE1C;YACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACH,MAAM,EAAEK,CAAC,EAAE,EAAE;cAClC,MAAMC,GAAG,GAAGH,IAAI,CAACE,CAAC,CAAC;cACnB,IAAIC,GAAG,CAACC,SAAS,IAAI,IAAI,EAAE;gBAAE;;cAC7B,IAAIH,MAAM,CAACE,GAAG,CAACE,WAAW,CAAC,IAAI,IAAI,EAAE;gBACjC,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACC,QAAQ,CAACJ,GAAG,CAACE,WAAW,CAAC;gBAClD,IAAIC,KAAK,EAAE;kBACPL,MAAM,CAACE,GAAG,CAACE,WAAW,CAAC,GAAGC,KAAK,CAACE,IAAI;;;cAG5CL,GAAG,CAACC,SAAS,GAAGH,MAAM,CAACE,GAAG,CAACE,WAAW,CAAC;;YAG3C,OAAOL,IAAI;;QAGf,KAAK,eAAe;UAChB,IAAI,IAAI,CAAClD,OAAO,CAACK,IAAI,KAAK,WAAW,EAAE;YAAE,OAAO,GAAG;;UACnDK,GAAG,IAAI,+BAA+B;UACtCA,GAAG,IAAIT,MAAM;UACb,OAAO0D,UAAU,CAAC,CAAC,MAAMhD,GAAG,CAACD,GAAG,EAAE,IAAI,EAAE5C,SAAS,CAAC,EAAE8F,MAAM,CAAC;QAE/D;UACI;;MAGR,OAAOC,MAAA,CAAMrD,OAAO,CAAAsD,IAAA,OAAC5E,MAAM,EAAEuB,MAAM;IACvC,CAAC;;EAED;EACAsD,UAAUA,CAACC,aAAuC,EAAEC,UAAqB,EAAEC,QAAmB;IAE1F,IAAIxD,GAAG,GAAG,IAAI,CAACJ,OAAO;IAEtB,IAAIL,MAAM,GAAG,EAAE;IACf,IAAI,IAAI,CAACA,MAAM,EAAE;MAAEA,MAAM,IAAI,UAAU,GAAG,IAAI,CAACA,MAAM;;IAErD,IAAIgE,UAAU,IAAI,IAAI,EAAE;MAAEA,UAAU,GAAG,CAAC;;IACxC,IAAIC,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,QAAQ;;IAE3C,OAAO,IAAI,CAACC,WAAW,CAACH,aAAa,CAAC,CAACI,IAAI,CAAEnC,OAAO,IAAI;MACpDvB,GAAG,IAAI,4CAA4C,GAAGuB,OAAO;MAC7DvB,GAAG,IAAI,cAAc,GAAGuD,UAAU;MAClCvD,GAAG,IAAI,YAAY,GAAGwD,QAAQ;MAC9BxD,GAAG,IAAI,WAAW,GAAGT,MAAM;MAE3B,IAAI,CAACc,IAAI,CAAC,OAAO,EAAE;QACfC,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAEP,GAAG;QACZQ,QAAQ,EAAE;OACb,CAAC;MAEF,MAAMC,UAAU,GAAG;QACfT,GAAG,EAAEA,GAAG;QACRU,oBAAoB,EAAE,IAAI;QAC1BC,gBAAgB,EAAEA,CAACC,OAAe,EAAEZ,GAAW,KAAI;UAC/C,IAAI,IAAI,CAACT,MAAM,KAAKjB,aAAa,EAAE;YAC/B/B,mBAAmB,EAAE;;UAEzB,OAAOuE,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;QAChC;OACH;MAED,OAAOzE,SAAS,CAACmE,UAAU,EAAE,IAAI,EAAErD,SAAS,CAAC,CAACsG,IAAI,CAAE5G,MAAkB,IAAI;QACtE,IAAI,CAACuD,IAAI,CAAC,OAAO,EAAE;UACfC,MAAM,EAAE,UAAU;UAClBC,OAAO,EAAEP,GAAG;UACZsB,QAAQ,EAAElF,QAAQ,CAACU,MAAM,CAAC;UAC1B0D,QAAQ,EAAE;SACb,CAAC;QAEF,IAAImD,MAAM,GAA+B,EAAE;QAC3C7G,MAAM,CAAC8G,OAAO,CAAEC,EAAE,IAAI;UAClB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAACD,OAAO,CAAC,UAAS7G,GAAG;YAC1C,IAAI8G,EAAE,CAAC9G,GAAG,CAAC,IAAI,EAAE,EAAE;cAAE,OAAO8G,EAAE,CAAC9G,GAAG,CAAC;;UACvC,CAAC,CAAC;UACF,IAAI8G,EAAE,CAACC,OAAO,IAAI,IAAI,IAAID,EAAE,CAACE,eAAe,IAAI,IAAI,EAAE;YAClDF,EAAE,CAACC,OAAO,GAAGD,EAAE,CAACE,eAAe;;UAEnC,IAAIC,IAAI,GAAG,IAAI,CAACC,SAAS,CAACC,mBAAmB,CAACL,EAAE,CAAC;UACjD,IAAIA,EAAE,CAACM,SAAS,EAAE;YAAEH,IAAI,CAACI,SAAS,GAAGhG,QAAQ,CAACyF,EAAE,CAACM,SAAS,CAAC;;UAC3DR,MAAM,CAACU,IAAI,CAACL,IAAI,CAAC;QACrB,CAAC,CAAC;QACF,OAAOL,MAAM;MACjB,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEA9C,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACtB,MAAM,KAAKjB,aAAa;EACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}