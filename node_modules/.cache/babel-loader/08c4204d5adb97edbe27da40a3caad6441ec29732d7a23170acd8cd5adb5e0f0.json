{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    logger.checkNew(new.target, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n    const strictData = v => {\n      return this.data(v, true);\n    };\n    formats.transaction = {\n      hash: hash,\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      gasPrice: bigNumber,\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      status: Formatter.allowNull(number)\n    };\n    formats.block = {\n      hash: hash,\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: address,\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash))\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  }\n  // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n    return BigNumber.from(number).toNumber();\n  }\n  // Strict! Used on input.\n  bigNumber(value) {\n    return BigNumber.from(value);\n  }\n  // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n      if (value === \"true\") {\n        return true;\n      }\n      if (value === \"false\") {\n        return false;\n      }\n    }\n    throw new Error(\"invalid boolean - \" + value);\n  }\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n  data(value, strict) {\n    const result = this.hex(value, strict);\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n    return result;\n  }\n  // Requires an address\n  // Strict! Used on input.\n  address(value) {\n    return getAddress(value);\n  }\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n  contractAddress(value) {\n    return getContractAddress(value);\n  }\n  // Strict! Used on input.\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n    if (blockTag === \"latest\" || blockTag === \"pending\") {\n      return blockTag;\n    }\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n    throw new Error(\"invalid blockTag\");\n  }\n  // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    return result;\n  }\n  // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n    const v = BigNumber.from(value);\n    try {\n      return v.toNumber();\n    } catch (error) {}\n    return null;\n  }\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n    return hexZeroPad(value, 32);\n  }\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    }\n    return Formatter.check(format, value);\n  }\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  }\n  // Strict! Used on input.\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    }\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    // Rename input to data\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    }\n    // If to and creates are empty, populate the creates from the transaction\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    }\n    // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n    /*\n    if (!transaction.raw) {\n           // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n         if (transaction.v && transaction.r && transaction.s) {\n             let raw = [\n                 stripZeros(hexlify(transaction.nonce)),\n                 stripZeros(hexlify(transaction.gasPrice)),\n                 stripZeros(hexlify(transaction.gasLimit)),\n                 (transaction.to || \"0x\"),\n                 stripZeros(hexlify(transaction.value || \"0x\")),\n                 hexlify(transaction.data || \"0x\"),\n                 stripZeros(hexlify(transaction.v || \"0x\")),\n                 stripZeros(hexlify(transaction.r)),\n                 stripZeros(hexlify(transaction.s)),\n             ];\n               transaction.raw = rlpEncode(raw);\n         }\n     }\n     */\n    const result = Formatter.check(this.formats.transaction, transaction);\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId;\n      // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n        if (chainId < 0) {\n          chainId = 0;\n        }\n        chainId = parseInt(chainId);\n      }\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n      result.chainId = chainId;\n    }\n    // 0x0000... should actually be null\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n    return result;\n  }\n  transaction(value) {\n    return parseTransaction(value);\n  }\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value);\n    // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n    if (result.status != null) {\n      result.byzantium = true;\n    }\n    return result;\n  }\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n    return null;\n  }\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n  static check(format, object) {\n    const result = {};\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n    return result;\n  }\n  // if value is null-ish, nullValue is returned\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n      return format(value);\n    };\n  }\n  // If value is false-ish, replaceValue is returned\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n      return format(value);\n    };\n  }\n  // Requires an Array satisfying check\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","parse","parseTransaction","Logger","version","logger","Formatter","constructor","checkNew","new","target","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","strictData","v","transaction","blockHash","allowNull","blockNumber","transactionIndex","confirmations","from","gasPrice","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","callAddress","error","_block","format","author","check","gas","isZero","input","chainId","networkId","parseInt","replace","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"sources":["/Users/tonny/copia del poyecto/my-app/node_modules/@ethersproject/providers/src.ts/formatter.ts"],"sourcesContent":["\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            gasPrice: bigNumber,\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            status: Formatter.allowNull(number)\n        };\n\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: address,\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n       if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        return Formatter.check(format, value);\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n       // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n       /*\n       if (!transaction.raw) {\n\n            // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n            if (transaction.v && transaction.r && transaction.s) {\n                let raw = [\n                    stripZeros(hexlify(transaction.nonce)),\n                    stripZeros(hexlify(transaction.gasPrice)),\n                    stripZeros(hexlify(transaction.gasLimit)),\n                    (transaction.to || \"0x\"),\n                    stripZeros(hexlify(transaction.value || \"0x\")),\n                    hexlify(transaction.data || \"0x\"),\n                    stripZeros(hexlify(transaction.v || \"0x\")),\n                    stripZeros(hexlify(transaction.r)),\n                    stripZeros(hexlify(transaction.s)),\n                ];\n\n                transaction.raw = rlpEncode(raw);\n            }\n        }\n        */\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}