{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nlet _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n  return function (method, params) {\n    // Metamask complains about eth_sign (and on some versions hangs)\n    if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n      // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n      method = \"personal_sign\";\n      params = [params[1], params[0]];\n    }\n    const request = {\n      method: method,\n      params: params,\n      id: _nextId++,\n      jsonrpc: \"2.0\"\n    };\n    return new Promise((resolve, reject) => {\n      sendFunc(request, function (error, result) {\n        if (error) {\n          return reject(error);\n        }\n        if (result.error) {\n          const error = new Error(result.error.message);\n          error.code = result.error.code;\n          error.data = result.error.data;\n          return reject(error);\n        }\n        resolve(result.result);\n      });\n    });\n  };\n}\nfunction buildEip1193Fetcher(provider) {\n  return function (method, params) {\n    if (params == null) {\n      params = [];\n    }\n    // Metamask complains about eth_sign (and on some versions hangs)\n    if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n      // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n      method = \"personal_sign\";\n      params = [params[1], params[0]];\n    }\n    return provider.request({\n      method,\n      params\n    });\n  };\n}\nexport class Web3Provider extends JsonRpcProvider {\n  constructor(provider, network) {\n    logger.checkNew(new.target, Web3Provider);\n    if (provider == null) {\n      logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n    }\n    let path = null;\n    let jsonRpcFetchFunc = null;\n    let subprovider = null;\n    if (typeof provider === \"function\") {\n      path = \"unknown:\";\n      jsonRpcFetchFunc = provider;\n    } else {\n      path = provider.host || provider.path || \"\";\n      if (!path && provider.isMetaMask) {\n        path = \"metamask\";\n      }\n      subprovider = provider;\n      if (provider.request) {\n        if (path === \"\") {\n          path = \"eip-1193:\";\n        }\n        jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n      } else if (provider.sendAsync) {\n        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n      } else if (provider.send) {\n        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n      } else {\n        logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n      }\n      if (!path) {\n        path = \"unknown:\";\n      }\n    }\n    super(path, network);\n    defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n    defineReadOnly(this, \"provider\", subprovider);\n  }\n  send(method, params) {\n    return this.jsonRpcFetchFunc(method, params);\n  }\n}","map":{"version":3,"names":["defineReadOnly","Logger","version","logger","JsonRpcProvider","_nextId","buildWeb3LegacyFetcher","provider","sendFunc","method","params","isMetaMask","isStatus","request","id","jsonrpc","Promise","resolve","reject","error","result","Error","message","code","data","buildEip1193Fetcher","Web3Provider","constructor","network","checkNew","new","target","throwArgumentError","path","jsonRpcFetchFunc","subprovider","host","sendAsync","bind","send"],"sources":["/Users/tonny/copia del poyecto/my-app/node_modules/@ethersproject/providers/src.ts/web3-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = \"personal_sign\";\n            params = [ params[1], params[0] ];\n        }\n\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            sendFunc(request, function(error, result) {\n                if (error) { return reject(error); }\n\n                if (result.error) {\n                    const error = new Error(result.error.message);\n                    (<any>error).code = result.error.code;\n                    (<any>error).data = result.error.data;\n                    return reject(error);\n                }\n\n                resolve(result.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = \"personal_sign\";\n            params = [ params[1], params[0] ];\n        }\n\n        return provider.request({ method, params });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        logger.checkNew(new.target, Web3Provider);\n\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}