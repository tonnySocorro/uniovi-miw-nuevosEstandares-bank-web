{"ast":null,"code":"var _jsxFileName = \"/Users/tonny/my-app/src/index.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Contract, ethers } from \"ethers\";\nimport myContractManifest from \"./contracts/MyContract.json\";\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const myContract = useRef(null);\n  const [tikets, setTikets] = useState([]);\n  useEffect(() => {}, []);\n  let initContracts = async () => {\n    var _myContract$current;\n    await configureBlockchain();\n    let tiketsFromBlockchain = await ((_myContract$current = myContract.current) === null || _myContract$current === void 0 ? void 0 : _myContract$current.getTikets());\n    if (tiketsFromBlockchain != null) setTikets(tiketsFromBlockchain);\n  };\n  let configureBlockchain = async () => {\n    try {\n      let provider = await detectEthereumProvider();\n      if (provider) {\n        await provider.request({\n          method: 'eth_requestAccounts'\n        });\n        const networkId = await provider.request({\n          method: 'net_version'\n        });\n        provider = new ethers.providers.Web3Provider(provider);\n        const signer = provider.getSigner();\n        myContract.current = new Contract(myContractManifest.networks[networkId].address, myContractManifest.abi, signer);\n      }\n    } catch (error) {}\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tikets store\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tikets.map((address, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Tiket \", i, \" comprado por \", address, address == ethers.constants.AddressZero && /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          onClick: () => clickBuyTiket(i),\n          children: \" buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ohBOHvmIFtEpuMYfbSgK0ZjThEs=\");\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 5\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","detectEthereumProvider","Contract","ethers","myContractManifest","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","myContract","tikets","setTikets","initContracts","_myContract$current","configureBlockchain","tiketsFromBlockchain","current","getTikets","provider","request","method","networkId","providers","Web3Provider","signer","getSigner","networks","address","abi","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","i","constants","AddressZero","href","onClick","clickBuyTiket","_c","root","createRoot","document","getElementById","render","StrictMode","$RefreshReg$"],"sources":["/Users/tonny/my-app/src/index.js"],"sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Contract, ethers } from \"ethers\";\nimport myContractManifest from \"./contracts/MyContract.json\";\nimport { useState, useEffect, useRef } from 'react';\nfunction App(){\n  const myContract = useRef(null);\n  const [tikets, setTikets] = useState([]);\n  useEffect( () => {\n         \n  }, [] )\n  let initContracts = async () => {\n    await configureBlockchain();\n    let tiketsFromBlockchain  = await myContract.current?.getTikets();\n    if (tiketsFromBlockchain != null)\n      setTikets(tiketsFromBlockchain)\n}\n\n  let configureBlockchain = async () => {\n    try {\n      let provider = await detectEthereumProvider();\n      if (provider) {\n        await provider.request({ method: 'eth_requestAccounts' });\n        const networkId = await provider.request({ method: 'net_version' })\n\n        provider = new ethers.providers.Web3Provider(provider);\n        const signer = provider.getSigner();\n        \n          myContract.current  = new Contract(\n          myContractManifest.networks[networkId].address,\n          myContractManifest.abi,\n          signer\n        );\n\n\n      }\n    } catch (error) { }\n  }\n \n  return (\n    <div>\n        <h1>Tikets store</h1>\n        <ul>\n            { tikets.map( (address, i) =>\n                <li>Tiket { i } comprado por { address }\n                    { address == ethers.constants.AddressZero && \n                        <a href=\"#\" onClick={()=>clickBuyTiket(i)}> buy</a> }\n                </li>\n            )}\n        </ul>\n    </div>\n\n)\n}\n\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}