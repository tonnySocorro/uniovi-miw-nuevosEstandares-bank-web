{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n      case \"filter\":\n        return this.filter;\n    }\n    return this.tag;\n  }\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n  get hash() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n    return comps[1];\n  }\n  get filter() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n    return filter;\n  }\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nexport class Resolver {\n  constructor(provider, address, name) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n  }\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"addr(bytes32,uint256)\")\n      const transaction = {\n        to: this.address,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n      const result = yield this.provider.call(transaction);\n      if (result === \"0x\") {\n        return null;\n      }\n      const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n      const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n      return hexDataSlice(result, offset + 32, offset + 32 + length);\n    });\n  }\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n    const bytes = arrayify(hexBytes);\n    // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    }\n    // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    }\n    // Bech32\n    if (coinInfo.prefix != null) {\n      const length = bytes[1];\n      // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n      let version = bytes[0];\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n    return null;\n  }\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      }\n      // If Ethereum, use the standard `addr(bytes32)`\n      if (coinType === 60) {\n        // keccak256(\"addr(bytes32)\")\n        const transaction = {\n          to: this.address,\n          data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n        };\n        const hexBytes = yield this.provider.call(transaction);\n        // No address\n        if (hexBytes === \"0x\" || hexBytes === HashZero) {\n          return null;\n        }\n        return this.provider.formatter.callAddress(hexBytes);\n      }\n      // keccak256(\"addr(bytes32,uint256\")\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n      // No address\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // Compute the address\n      const address = this._getAddress(coinType, hexBytes);\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n      return address;\n    });\n  }\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n      // No contenthash\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // IPFS (CID: 1, Type: DAG-PB)\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      }\n      // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key);\n      // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n      // Pad to word-size (32 bytes)\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      return toUtf8String(hexBytes);\n    });\n  }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super();\n    // Events being listened to\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.formatter = new.target.getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      this._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(error => {});\n      // Trigger initial network setting (async)\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        }\n        // Try the Provider's network detection (this MUST throw if it cannot)\n        if (network == null) {\n          network = yield this.detectNetwork();\n        }\n        // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        }\n        // Possible this call stacked so do not call defineReadOnly again\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n          this.emit(\"network\", network, null);\n        }\n      }\n      return this._network;\n    });\n  }\n  // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is refelcted); otherwise this cannot change\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n        throw error;\n      });\n    });\n  }\n  // @TODO: Remove this and just create a singleton formatter\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n    return defaultFormatter;\n  }\n  // @TODO: Remove this and just use getNetwork\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n  // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready();\n      // Allowing stale data up to maxAge old\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            }\n            // Too old; fetch a new value\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(({\n        blockNumber,\n        networkError\n      }) => {\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n          throw networkError;\n        }\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n        this._maxInternalBlockNumber = blockNumber;\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber;\n      // Swallow unhandled exceptions; if needed they are handled else where\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++;\n      // Track all running promises, so we can trigger a post-poll once they are complete\n      const runners = [];\n      let blockNumber = null;\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n      this._setFastBlockNumber(blockNumber);\n      // Emit a poll event after we have the latest (fast) block number\n      this.emit(\"poll\", pollId, blockNumber);\n      // If the block has not changed, meh.\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      }\n      // First polling cycle, trigger a \"block\" events\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(\"network block skew detected; skipping block events\");\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      }\n      // The emitted block was updated, check for obsolete events\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          }\n          // The block we were at when we emitted this event\n          const eventBlockNumber = this._emitted[key];\n          // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n          if (eventBlockNumber === \"pending\") {\n            return;\n          }\n          // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      }\n      // First polling cycle\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      }\n      // Find all transaction hashes we are waiting on\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n          case \"filter\":\n            {\n              const filter = event.filter;\n              filter.fromBlock = this._lastBlockNumber + 1;\n              filter.toBlock = blockNumber;\n              const runner = this.getLogs(filter).then(logs => {\n                if (logs.length === 0) {\n                  return;\n                }\n                logs.forEach(log => {\n                  this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                  this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                  this.emit(filter, log);\n                });\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n        }\n      });\n      this._lastBlockNumber = blockNumber;\n      // Once all events for this loop have been processed, emit \"didPoll\"\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  }\n  // Deprecated; do not use this\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n    if (this.polling) {\n      this.poll();\n    }\n  }\n  get network() {\n    return this._network;\n  }\n  // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready();\n      // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n      const currentNetwork = yield this.detectNetwork();\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork;\n          // Reset all internal block number guards and caches\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null;\n          // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n      return network;\n    });\n  }\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n  get polling() {\n    return this._poller != null;\n  }\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll();\n          // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            }\n            // Clear out the bootstrap so we can do another\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n    this._pollingInterval = value;\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n  _getFastBlockNumber() {\n    const now = getTime();\n    // Stale block number, request a newer value\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n        return this._fastBlockNumber;\n      });\n    }\n    return this._fastBlockNumberPromise;\n  }\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    }\n    // Update the time we updated the blocknumber\n    this._fastQueryDate = getTime();\n    // Newer block number, use  it\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (confirmations == null) {\n        confirmations = 1;\n      }\n      const receipt = yield this.getTransactionReceipt(transactionHash);\n      // Receipt is already good\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      }\n      // Poll until the receipt is good...\n      return new Promise((resolve, reject) => {\n        let timer = null;\n        let done = false;\n        const handler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n          if (timer) {\n            clearTimeout(timer);\n          }\n          if (done) {\n            return;\n          }\n          done = true;\n          this.removeListener(transactionHash, handler);\n          resolve(receipt);\n        };\n        this.on(transactionHash, handler);\n        if (typeof timeout === \"number\" && timeout > 0) {\n          timer = setTimeout(() => {\n            if (done) {\n              return;\n            }\n            timer = null;\n            done = true;\n            this.removeListener(transactionHash, handler);\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n          if (timer.unref) {\n            timer.unref();\n          }\n        }\n      });\n    });\n  }\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  // This should be called by any subclass wrapping a TransactionResponse\n  _wrapTransaction(tx, hash) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n    const result = tx;\n    // Check the hash we expect is the same as the hash the server reported\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n    // @TODO: (confirmations? number, timeout? number)\n    result.wait = confirmations => __awaiter(this, void 0, void 0, function* () {\n      // We know this transaction *must* exist (whether it gets mined is\n      // another story), so setting an emitted value forces us to\n      // wait even if the node returns null for the receipt\n      if (confirmations !== 0) {\n        this._emitted[\"t:\" + tx.hash] = \"pending\";\n      }\n      const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n      if (receipt == null && confirmations === 0) {\n        return null;\n      }\n      // No longer pending, allow the polling loop to garbage collect this\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n      return receipt;\n    });\n    return result;\n  }\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"call\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this.resolveName(addressOrName);\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n      return address;\n    });\n  }\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag;\n      // If blockTag is a number (not \"latest\", etc), this is the block number\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params);\n        // Block was not found\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          }\n          // For block tags, if we are asking for a future block, we return null\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          }\n          // Retry on the next block\n          return undefined;\n        }\n        // Add transactions\n        if (includeTransactions) {\n          let blockNumber = null;\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              }\n              // Add the confirmations using the fast block number (pessimistic)\n              let confirmations = blockNumber - tx.blockNumber + 1;\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n              tx.confirmations = confirmations;\n            }\n          }\n          return this.formatter.blockWithTransactions(block);\n        }\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        const tx = this.formatter.transactionResponse(result);\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - tx.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          tx.confirmations = confirmations;\n        }\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        // \"geth-etc\" returns receipts before they are ready\n        if (result.blockHash == null) {\n          return undefined;\n        }\n        const receipt = this.formatter.receipt(result);\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          receipt.confirmations = confirmations;\n        }\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n        return this.formatter.blockTag(blockNumber);\n      }\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this._getResolver(name);\n      if (address == null) {\n        return null;\n      }\n      return new Resolver(this, address, name);\n    });\n  }\n  _getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the resolver from the blockchain\n      const network = yield this.getNetwork();\n      // No ENS...\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"ENS\",\n          network: network.name\n        });\n      }\n      // keccak256(\"resolver(bytes32)\")\n      const transaction = {\n        to: network.ensAddress,\n        data: \"0x0178b8bf\" + namehash(name).substring(2)\n      };\n      return this.formatter.callAddress(yield this.call(transaction));\n    });\n  }\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name;\n      // If it is already an address, nothing to resolve\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      }\n      // Get the addr from the resovler\n      const resolver = yield this.getResolver(name);\n      if (!resolver) {\n        return null;\n      }\n      return yield resolver.getAddress();\n    });\n  }\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddress = yield this._getResolver(reverseName);\n      if (!resolverAddress) {\n        return null;\n      }\n      // keccak(\"name(bytes32)\")\n      let bytes = arrayify(yield this.call({\n        to: resolverAddress,\n        data: \"0x691f3431\" + namehash(reverseName).substring(2)\n      }));\n      // Strip off the dynamic string pointer (0x20)\n      if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n        return null;\n      }\n      bytes = bytes.slice(32);\n      // Not a length-prefixed string\n      if (bytes.length < 32) {\n        return null;\n      }\n      // Get the length of the string (from the length-prefix)\n      const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n      bytes = bytes.slice(32);\n      // Length longer than available data\n      if (length > bytes.length) {\n        return null;\n      }\n      const name = toUtf8String(bytes.slice(0, length));\n      // Make sure the reverse record matches the foward record\n      const addr = yield this.resolveName(name);\n      if (addr != address) {\n        return null;\n      }\n      return name;\n    });\n  }\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n    this._events.push(event);\n    this._startEvent(event);\n    return this;\n  }\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n  emit(eventName, ...args) {\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n  removeAllListeners(eventName) {\n    let stopped = [];\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","poll","bech32","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","constructor","tag","listener","once","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","encode","Resolver","provider","name","formatter","_fetchBytes","selector","parameters","transaction","to","result","call","offset","toNumber","_getAddress","coinType","hexBytes","coinInfo","String","throwError","errors","UNSUPPORTED_OPERATION","operation","bytes","match","parseInt","words","toWords","unshift","getAddress","substring","callAddress","getContentHash","ipfs","swarm","getText","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","checkNew","new","target","_events","_emitted","block","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","error","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","then","code","NETWORK_ERROR","undefined","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","Math","abs","makeError","previousBlockNumber","i","eventBlockNumber","runner","getTransactionReceipt","receipt","push","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","reject","timer","done","handler","clearTimeout","removeListener","on","TIMEOUT","unref","getGasPrice","SERVER_ERROR","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getTransactionCount","getCode","getStorageAt","position","p","_wrapTransaction","tx","expectedHash","returnedHash","wait","__awaiter","status","CALL_EXCEPTION","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","transactionRequest","_getFilter","estimateGas","resolveName","JSON","stringify","_getBlock","blockHashOrBlockTag","includeTransactions","transactions","blockWithTransactions","oncePoll","getBlock","getBlockWithTransactions","getTransaction","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","_getResolver","ensAddress","resolver","lookupAddress","reverseName","resolverAddress","eq","addr","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","args","stopped","eventTag","apply","listenerCount","listeners","off","removeAllListeners","found"],"sources":["/Users/tonny/my-app/node_modules/@ethersproject/providers/src.ts/base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<string>;\n    lookupAddress(address: string): Promise<string>;\n    getResolver(name: string): Promise<EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    constructor(provider: BaseProvider, address: string, name: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<string> {\n\n        // keccak256(\"addr(bytes32,uint256)\")\n        const transaction = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        const result = await this.provider.call(transaction);\n        if (result === \"0x\") { return null; }\n\n        const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n        return hexDataSlice(result, offset + 32, offset + 32 + length);\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            // keccak256(\"addr(bytes32)\")\n            const transaction = {\n                to: this.address,\n                data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n            };\n            const hexBytes = await this.provider.call(transaction);\n\n            // No address\n            if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n            return this.provider.formatter.callAddress(hexBytes);\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is refelcted); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(\"network block skew detected; skipping block events\");\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        if (confirmations == null) { confirmations = 1; }\n\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            let timer: NodeJS.Timer = null;\n            let done = false;\n\n            const handler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n\n                if (timer) { clearTimeout(timer); }\n                if (done) { return; }\n                done = true;\n\n                this.removeListener(transactionHash, handler);\n                resolve(receipt);\n            }\n            this.on(transactionHash, handler);\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                timer = setTimeout(() => {\n                    if (done) { return; }\n                    timer = null;\n                    done = true;\n\n                    this.removeListener(transactionHash, handler);\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        // @TODO: (confirmations? number, timeout? number)\n        result.wait = async (confirmations?: number) => {\n\n            // We know this transaction *must* exist (whether it gets mined is\n            // another story), so setting an emitted value forces us to\n            // wait even if the node returns null for the receipt\n            if (confirmations !== 0) {\n                this._emitted[\"t:\" + tx.hash] = \"pending\";\n            }\n\n            const receipt = await this.waitForTransaction(tx.hash, confirmations)\n            if (receipt == null && confirmations === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = this.formatter.blockTag(await this._getBlockTag(blockHashOrBlockTag));\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n                return this.formatter.blockWithTransactions(block);\n            }\n\n            return this.formatter.block(block);\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<Resolver> {\n        const address = await this._getResolver(name);\n        if (address == null) { return null; }\n        return new Resolver(this, address, name);\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        return this.formatter.callAddress(await this.call(transaction));\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}