{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\n// @TOOD remove dependences transactions\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = yield nameOrPromise;\n    // If it is already an address, just use it (after adding checksum)\n    try {\n      return getAddress(name);\n    } catch (error) {}\n    if (!resolver) {\n      logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resolveName\"\n      });\n    }\n    const address = yield resolver.resolveName(name);\n    if (address == null) {\n      logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n    return address;\n  });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (Array.isArray(paramType)) {\n      return yield Promise.all(paramType.map((paramType, index) => {\n        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n      }));\n    }\n    if (paramType.type === \"address\") {\n      return yield resolveName(resolver, value);\n    }\n    if (paramType.type === \"tuple\") {\n      return yield resolveAddresses(resolver, value, paramType.components);\n    }\n    if (paramType.baseType === \"array\") {\n      if (!Array.isArray(value)) {\n        return Promise.reject(new Error(\"invalid value for array\"));\n      }\n      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n    return value;\n  });\n}\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If an extra argument is given, it is overrides\n    let overrides = {};\n    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      overrides = shallowCopy(args.pop());\n    }\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n      if (overrides.from) {\n        // Contracts with a Signer are from the Signer's frame-of-reference;\n        // but we allow overriding \"from\" if it matches the signer\n        overrides.from = resolveProperties({\n          override: resolveName(contract.signer, overrides.from),\n          signer: contract.signer.getAddress()\n        }).then(check => __awaiter(this, void 0, void 0, function* () {\n          if (getAddress(check.signer) !== check.override) {\n            logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides.from\"\n            });\n          }\n          return check.override;\n        }));\n      } else {\n        overrides.from = contract.signer.getAddress();\n      }\n    } else if (overrides.from) {\n      overrides.from = resolveName(contract.provider, overrides.from);\n      //} else {\n      // Contracts without a signer can override \"from\", and if\n      // unspecified the zero address is used\n      //overrides.from = AddressZero;\n    }\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = yield resolveProperties({\n      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n      address: contract.resolvedAddress,\n      overrides: resolveProperties(overrides) || {}\n    });\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx = {\n      data: data,\n      to: resolved.address\n    };\n    // Resolved Overrides\n    const ro = resolved.overrides;\n    // Populate simple overrides\n    if (ro.nonce != null) {\n      tx.nonce = BigNumber.from(ro.nonce).toNumber();\n    }\n    if (ro.gasLimit != null) {\n      tx.gasLimit = BigNumber.from(ro.gasLimit);\n    }\n    if (ro.gasPrice != null) {\n      tx.gasPrice = BigNumber.from(ro.gasPrice);\n    }\n    if (ro.from != null) {\n      tx.from = ro.from;\n    }\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n      // Conmpute the intrinisic gas cost for this transaction\n      // @TODO: This is based on the yellow paper as of Petersburg; this is something\n      // we may wish to parameterize in v6 as part of the Network object. Since this\n      // is always a non-nil to address, we can ignore G_create, but may wish to add\n      // similar logic to the ContractFactory.\n      let intrinsic = 21000;\n      const bytes = arrayify(data);\n      for (let i = 0; i < bytes.length; i++) {\n        intrinsic += 4;\n        if (bytes[i]) {\n          intrinsic += 64;\n        }\n      }\n      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n    // Populate \"value\" override\n    if (ro.value) {\n      const roValue = BigNumber.from(ro.value);\n      if (!roValue.isZero() && !fragment.payable) {\n        logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: overrides.value\n        });\n      }\n      tx.value = roValue;\n    }\n    // Remvoe the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);\n    if (leftovers.length) {\n      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"overrides\",\n        overrides: leftovers\n      });\n    }\n    return tx;\n  });\n}\nfunction buildPopulate(contract, fragment) {\n  return function (...args) {\n    return populateTransaction(contract, fragment, args);\n  };\n}\nfunction buildEstimate(contract, fragment) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!signerOrProvider) {\n        logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"estimateGas\"\n        });\n      }\n      const tx = yield populateTransaction(contract, fragment, args);\n      return yield signerOrProvider.estimateGas(tx);\n    });\n  };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Extract the \"blockTag\" override if present\n      let blockTag = undefined;\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        const overrides = shallowCopy(args.pop());\n        if (overrides.blockTag != null) {\n          blockTag = yield overrides.blockTag;\n        }\n        delete overrides.blockTag;\n        args.push(overrides);\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed(blockTag);\n      }\n      // Call a node and get the result\n      const tx = yield populateTransaction(contract, fragment, args);\n      const result = yield signerOrProvider.call(tx, blockTag);\n      try {\n        let value = contract.interface.decodeFunctionResult(fragment, result);\n        if (collapseSimple && fragment.outputs.length === 1) {\n          value = value[0];\n        }\n        return value;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          error.address = contract.address;\n          error.args = args;\n          error.transaction = tx;\n        }\n        throw error;\n      }\n    });\n  };\n}\nfunction buildSend(contract, fragment) {\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!contract.signer) {\n        logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction\"\n        });\n      }\n      // If the contract was just deployed, wait until it is minded\n      if (contract.deployTransaction != null) {\n        yield contract._deployed();\n      }\n      const txRequest = yield populateTransaction(contract, fragment, args);\n      const tx = yield contract.signer.sendTransaction(txRequest);\n      // Tweak the tw.wait so the receipt has extra properties\n      const wait = tx.wait.bind(tx);\n      tx.wait = confirmations => {\n        return wait(confirmations).then(receipt => {\n          receipt.events = receipt.logs.map(log => {\n            let event = deepCopy(log);\n            let parsed = null;\n            try {\n              parsed = contract.interface.parseLog(log);\n            } catch (e) {}\n            // Successfully parsed the event log; include it\n            if (parsed) {\n              event.args = parsed.args;\n              event.decode = (data, topics) => {\n                return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n              };\n              event.event = parsed.name;\n              event.eventSignature = parsed.signature;\n            }\n            // Useful operations\n            event.removeListener = () => {\n              return contract.provider;\n            };\n            event.getBlock = () => {\n              return contract.provider.getBlock(receipt.blockHash);\n            };\n            event.getTransaction = () => {\n              return contract.provider.getTransaction(receipt.transactionHash);\n            };\n            event.getTransactionReceipt = () => {\n              return Promise.resolve(receipt);\n            };\n            return event;\n          });\n          return receipt;\n        });\n      };\n      return tx;\n    });\n  };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(topic => {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n    return topic;\n  }).join(\":\") : \"\");\n}\nclass RunningEvent {\n  constructor(tag, filter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n  addListener(listener, once) {\n    this._listeners.push({\n      listener: listener,\n      once: once\n    });\n  }\n  removeListener(listener) {\n    let done = false;\n    this._listeners = this._listeners.filter(item => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n      done = true;\n      return false;\n    });\n  }\n  removeAllListeners() {\n    this._listeners = [];\n  }\n  listeners() {\n    return this._listeners.map(i => i.listener);\n  }\n  listenerCount() {\n    return this._listeners.length;\n  }\n  run(args) {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter(item => {\n      const argsCopy = args.slice();\n      // Call the callback in the next event loop\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0);\n      // Reschedule it if it not \"once\"\n      return !item.once;\n    });\n    return listenerCount;\n  }\n  prepareEvent(event) {}\n  // Returns the array that will be applied to an emit\n  getEmit(event) {\n    return [event];\n  }\n}\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additioanlly dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n  constructor(address, contractInterface, fragment, topics) {\n    const filter = {\n      address: address\n    };\n    let topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n    event.decode = (data, topics) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n    try {\n      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n  getEmit(event) {\n    const errors = checkResultErrors(event.args);\n    if (errors.length) {\n      throw errors[0].error;\n    }\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n}\n// A Wildard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n  constructor(address, contractInterface) {\n    super(\"*\", {\n      address: address\n    });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n      event.decode = (data, topics) => {\n        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n      };\n      event.args = parsed.args;\n    } catch (error) {\n      // No matching event\n    }\n  }\n}\nexport class Contract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    logger.checkNew(new.target, Contract);\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      const uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(eventSignature => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, (...args) => {\n          return {\n            address: this.address,\n            topics: this.interface.encodeFilterTopics(event, args)\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(name => {\n        const filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n    const uniqueNames = {};\n    const uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(signature => {\n      const fragment = this.interface.functions[signature];\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(name)}`);\n        return;\n      }\n      uniqueSignatures[signature] = true;\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        const name = fragment.name;\n        if (!uniqueNames[name]) {\n          uniqueNames[name] = [];\n        }\n        uniqueNames[name].push(signature);\n      }\n      if (this[signature] == null) {\n        defineReadOnly(this, signature, buildDefault(this, fragment, true));\n      }\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (this.functions[signature] == null) {\n        defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n      }\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n      }\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n      }\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(name => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n      const signature = signatures[0];\n      if (this[name] == null) {\n        defineReadOnly(this, name, this[signature]);\n      }\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n      }\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction);\n  }\n  static getInterface(contractInterface) {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n    return new Interface(contractInterface);\n  }\n  // @TODO: Allow timeout?\n  deployed() {\n    return this._deployed();\n  }\n  _deployed(blockTag) {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {\n          if (code === \"0x\") {\n            logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n              contractAddress: this.address,\n              operation: \"getDeployed\"\n            });\n          }\n          return this;\n        });\n      }\n    }\n    return this._deployedPromise;\n  }\n  // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n  fallback(overrides) {\n    if (!this.signer) {\n      logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"sendTransaction(fallback)\"\n      });\n    }\n    const tx = shallowCopy(overrides || {});\n    [\"from\", \"to\"].forEach(function (key) {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  }\n  // Reconnect to a different signer or provider\n  connect(signerOrProvider) {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n    const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n    return contract;\n  }\n  // Re-attach to a different on-chain instance of this contract\n  attach(addressOrName) {\n    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n  }\n  static isIndexed(value) {\n    return Indexed.isIndexed(value);\n  }\n  _normalizeRunningEvent(runningEvent) {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n    return runningEvent;\n  }\n  _getRunningEvent(eventName) {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      }\n      // Listen for any event that is registered\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      }\n      // Listen for any event\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      }\n      // Get the event Fragment (throws if ambiguous/unknown event)\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n    }\n    // We have topics to filter by...\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n      } catch (error) {}\n      // Filter by the unknown topichash\n      const filter = {\n        address: this.address,\n        topics: eventName.topics\n      };\n      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n    }\n    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n  }\n  _checkRunningEvents(runningEvent) {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag];\n      // If we have a poller for this, remove it\n      const emit = this._wrappedEmits[runningEvent.tag];\n      if (emit) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  }\n  // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n  _wrapEvent(runningEvent, log, listener) {\n    const event = deepCopy(log);\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n    };\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    };\n    // This may throw if the topics and data mismatch the signature\n    runningEvent.prepareEvent(event);\n    return event;\n  }\n  _addEventListener(runningEvent, listener, once) {\n    if (!this.provider) {\n      logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"once\"\n      });\n    }\n    runningEvent.addListener(listener, once);\n    // Track this running event and its listeners (may already be there; but no hard in updating)\n    this._runningEvents[runningEvent.tag] = runningEvent;\n    // If we are not polling the provider, start polling\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = log => {\n        let event = this._wrapEvent(runningEvent, log, listener);\n        // Try to emit the result for the parameterized event...\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        }\n        // Always emit \"event\" for fragment-base events\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        }\n        // Emit \"error\" if there was an error\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n      // Special events, like \"error\" do not have a filter\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n  queryFilter(event, fromBlockOrBlockhash, toBlock) {\n    const runningEvent = this._getRunningEvent(event);\n    const filter = shallowCopy(runningEvent.filter);\n    if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n      }\n      filter.blockHash = fromBlockOrBlockhash;\n    } else {\n      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      filter.toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n    return this.provider.getLogs(filter).then(logs => {\n      return logs.map(log => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n  on(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n    return this;\n  }\n  once(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n    return this;\n  }\n  emit(eventName, ...args) {\n    if (!this.provider) {\n      return false;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    const result = runningEvent.run(args) > 0;\n    // May have drained all the \"once\" events; check for living events\n    this._checkRunningEvents(runningEvent);\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!this.provider) {\n      return 0;\n    }\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n  listeners(eventName) {\n    if (!this.provider) {\n      return [];\n    }\n    if (eventName == null) {\n      const result = [];\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach(listener => {\n          result.push(listener);\n        });\n      }\n      return result;\n    }\n    return this._getRunningEvent(eventName).listeners();\n  }\n  removeAllListeners(eventName) {\n    if (!this.provider) {\n      return this;\n    }\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n      }\n      return this;\n    }\n    // Delete any listeners\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeAllListeners();\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  off(eventName, listener) {\n    if (!this.provider) {\n      return this;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeListener(listener);\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n}\nexport class ContractFactory {\n  constructor(contractInterface, bytecode, signer) {\n    let bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n  // @TODO: Future; rename to populteTransaction?\n  getDeployTransaction(...args) {\n    let tx = {};\n    // If we have 1 additional argument, we allow transaction overrides\n    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      tx = shallowCopy(args.pop());\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    }\n    // Do not allow these to be overridden in a deployment transaction\n    [\"data\", \"from\", \"to\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    // Make sure the call matches the constructor signature\n    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n    // Set the data to the bytecode + the encoded constructor arguments\n    tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n    return tx;\n  }\n  deploy(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let overrides = {};\n      // If 1 extra parameter was passed in, it contains overrides\n      if (args.length === this.interface.deploy.inputs.length + 1) {\n        overrides = args.pop();\n      }\n      // Make sure the call matches the constructor signature\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n      // Resolve ENS names and promises in the arguments\n      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n      params.push(overrides);\n      // Get the deployment transaction (with optional overrides)\n      const unsignedTx = this.getDeployTransaction(...params);\n      // Send the deployment transaction\n      const tx = yield this.signer.sendTransaction(unsignedTx);\n      const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n      const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n      defineReadOnly(contract, \"deployTransaction\", tx);\n      return contract;\n    });\n  }\n  attach(address) {\n    return this.constructor.getContract(address, this.interface, this.signer);\n  }\n  connect(signer) {\n    return new this.constructor(this.interface, this.bytecode, signer);\n  }\n  static fromSolidity(compilerOutput, signer) {\n    if (compilerOutput == null) {\n      logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n        argument: \"compilerOutput\"\n      });\n    }\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n    const abi = compilerOutput.abi;\n    let bytecode = null;\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n    return new this(abi, bytecode, signer);\n  }\n  static getInterface(contractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n  static getContractAddress(tx) {\n    return getContractAddress(tx);\n  }\n  static getContract(address, contractInterface, signer) {\n    return new Contract(address, contractInterface, signer);\n  }\n}","map":{"version":3,"names":["checkResultErrors","Indexed","Interface","Provider","Signer","VoidSigner","getAddress","getContractAddress","BigNumber","arrayify","concat","hexlify","isBytes","isHexString","defineReadOnly","deepCopy","getStatic","resolveProperties","shallowCopy","Logger","version","logger","allowedTransactionKeys","chainId","data","from","gasLimit","gasPrice","nonce","to","value","resolveName","resolver","nameOrPromise","name","error","throwError","errors","UNSUPPORTED_OPERATION","operation","address","throwArgumentError","resolveAddresses","paramType","Array","isArray","Promise","all","map","index","type","components","baseType","reject","Error","v","arrayChildren","populateTransaction","contract","fragment","args","overrides","length","inputs","pop","checkArgumentCount","signer","override","then","check","__awaiter","provider","resolved","resolvedAddress","interface","encodeFunctionData","tx","ro","toNumber","gas","intrinsic","bytes","i","add","roValue","isZero","payable","leftovers","Object","keys","filter","key","l","JSON","stringify","join","buildPopulate","buildEstimate","signerOrProvider","estimateGas","buildCall","collapseSimple","blockTag","undefined","push","deployTransaction","_deployed","result","call","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","buildSend","txRequest","sendTransaction","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","e","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildDefault","constant","getEventTag","topic","RunningEvent","constructor","tag","_listeners","addListener","listener","once","done","item","removeAllListeners","listeners","listenerCount","run","argsCopy","slice","setTimeout","apply","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","getEventTopic","format","decodeError","WildcardRunningEvent","Contract","addressOrName","checkNew","new","target","isSigner","isProvider","uniqueFilters","forEach","filters","encodeFilterTopics","warn","uniqueNames","uniqueSignatures","functions","callStatic","signatures","getInterface","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","getEvent","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","reduce","accum","ContractFactory","bytecode","bytecodeHex","object","substring","getDeployTransaction","deploy","encodeDeploy","params","unsignedTx","getContract","fromSolidity","compilerOutput","MISSING_ARGUMENT","argument","parse","abi","evm"],"sources":["/Users/tonny/copia del poyecto/my-app/node_modules/@ethersproject/contracts/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\n// @TOOD remove dependences transactions\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) { return Promise.reject(new Error(\"invalid value for array\")); }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Conmpute the intrinisic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    // Remvoe the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is minded\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tw.wait so the receipt has extra properties\n        const wait = tx.wait.bind(tx);\n        tx.wait = (confirmations?: number) => {\n            return wait(confirmations).then((receipt: ContractReceipt) => {\n                receipt.events = receipt.logs.map((log) => {\n                    let event: Event = (<Event>deepCopy(log));\n                    let parsed: LogDescription = null;\n                    try {\n                        parsed = contract.interface.parseLog(log);\n                    } catch (e){ }\n\n                    // Successfully parsed the event log; include it\n                    if (parsed) {\n                        event.args = parsed.args;\n                        event.decode = (data: BytesLike, topics?: Array<any>) => {\n                            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                        };\n                        event.event = parsed.name;\n                        event.eventSignature = parsed.signature;\n                    }\n\n                    // Useful operations\n                    event.removeListener = () => { return contract.provider; }\n                    event.getBlock = () => {\n                        return contract.provider.getBlock(receipt.blockHash);\n                    }\n                    event.getTransaction = () => {\n                        return contract.provider.getTransaction(receipt.transactionHash);\n                    }\n                    event.getTransactionReceipt = () => {\n                        return Promise.resolve(receipt);\n                    }\n\n                    return event;\n                });\n\n                return receipt;\n            });\n        };\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additioanlly dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | Array<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class Contract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listsners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        logger.checkNew(new.target, Contract);\n\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(name) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[name]) { uniqueNames[name] = [ ]; }\n                uniqueNames[name].push(signature);\n            }\n\n            if (this[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            const signature = signatures[0];\n\n            if (this[name] == null) {\n                defineReadOnly(this, name, this[signature]);\n            }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populteTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}