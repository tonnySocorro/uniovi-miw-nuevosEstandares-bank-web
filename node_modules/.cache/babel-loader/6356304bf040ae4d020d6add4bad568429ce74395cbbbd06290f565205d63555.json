{"ast":null,"code":"var _jsxFileName = \"/Users/tonny/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Contract, ethers } from \"ethers\";\nimport myContractManifest from \"./contracts/MyContract.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let configureBlockchain = async () => {\n    try {\n      let provider = await detectEthereumProvider();\n      if (provider) {\n        await provider.request({\n          method: 'eth_requestAccounts'\n        });\n        const networkId = await provider.request({\n          method: 'net_version'\n        });\n        provider = new ethers.providers.Web3Provider(provider);\n        const signer = provider.getSigner();\n        const tempContract = new Contract(myContractManifest.networks[networkId].address, myContractManifest.abi, signer);\n      }\n    } catch (error) {}\n  };\n}\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 5\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","detectEthereumProvider","Contract","ethers","myContractManifest","jsxDEV","_jsxDEV","App","configureBlockchain","provider","request","method","networkId","providers","Web3Provider","signer","getSigner","tempContract","networks","address","abi","error","_c","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","$RefreshReg$"],"sources":["/Users/tonny/my-app/src/index.js"],"sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Contract, ethers } from \"ethers\";\nimport myContractManifest from \"./contracts/MyContract.json\";\n\nfunction App(){\n\n  let configureBlockchain = async () => {\n    try {\n      let provider = await detectEthereumProvider();\n      if (provider) {\n        await provider.request({ method: 'eth_requestAccounts' });\n        const networkId = await provider.request({ method: 'net_version' })\n\n        provider = new ethers.providers.Web3Provider(provider);\n        const signer = provider.getSigner();\n        \n        const tempContract = new Contract(\n          myContractManifest.networks[networkId].address,\n          myContractManifest.abi,\n          signer\n        );\n\n\n      }\n    } catch (error) { }\n  }\n\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,sCAAsC;AAC7C,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,SAASC,QAAQ,EAAEC,MAAM,QAAQ,QAAQ;AACzC,OAAOC,kBAAkB,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,GAAGA,CAAA,EAAE;EAEZ,IAAIC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,IAAIC,QAAQ,GAAG,MAAMR,sBAAsB,CAAC,CAAC;MAC7C,IAAIQ,QAAQ,EAAE;QACZ,MAAMA,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QACzD,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAc,CAAC,CAAC;QAEnEF,QAAQ,GAAG,IAAIN,MAAM,CAACU,SAAS,CAACC,YAAY,CAACL,QAAQ,CAAC;QACtD,MAAMM,MAAM,GAAGN,QAAQ,CAACO,SAAS,CAAC,CAAC;QAEnC,MAAMC,YAAY,GAAG,IAAIf,QAAQ,CAC/BE,kBAAkB,CAACc,QAAQ,CAACN,SAAS,CAAC,CAACO,OAAO,EAC9Cf,kBAAkB,CAACgB,GAAG,EACtBL,MACF,CAAC;MAGH;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE,CAAE;EACpB,CAAC;AAEH;AAACC,EAAA,GAvBQf,GAAG;AAyBZ,MAAMgB,IAAI,GAAGvB,QAAQ,CAACwB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACPrB,OAAA,CAACP,KAAK,CAAC6B,UAAU;EAAAC,QAAA,eACbvB,OAAA,CAACC,GAAG;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACO,CACtB,CAAC;AAAC,IAAAX,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}