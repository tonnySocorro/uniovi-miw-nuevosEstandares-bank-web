{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n    const providerList = [];\n    if (providers.InfuraProvider) {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n    if (providers.EtherscanProvider) {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n    if (providers.AlchemyProvider) {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n    if (providers.PocketProvider) {\n      try {\n        providerList.push(new providers.PocketProvider(network));\n      } catch (error) {}\n    }\n    if (providers.CloudflareProvider) {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n    if (providerList.length === 0) {\n      return null;\n    }\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n    return providerList[0];\n  };\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n  return func;\n}\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n    return null;\n  };\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n  return func;\n}\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n    if (standard == null) {\n      return null;\n    }\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n  const standard = networks[network.name];\n  // Not a standard network; check that it is a valid network in general\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n    return network;\n  }\n  // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  }\n  // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n  let defaultProvider = network._defaultProvider || null;\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  }\n  // Standard Network (allow overriding the ENS address)\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","push","infura","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","CloudflareProvider","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","name","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","classic","classicMorden","classicTestnet","classicKotti","getNetwork","standard","throwArgumentError","defaultProvider"],"sources":["/Users/tonny/blockchain/bank/my-app/node_modules/@ethersproject/networks/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider) {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider) {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider) {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider) {\n            try {\n                providerList.push(new providers.PocketProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider) {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\nconst networks: { [name: string]: Network } = {\n    unspecified: {\n        chainId: 0,\n        name: \"unspecified\"\n    },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: {\n        chainId: 2,\n        name: \"morden\"\n    },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n     },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: {\n        chainId: 62,\n        name: \"classicMorden\",\n    },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}